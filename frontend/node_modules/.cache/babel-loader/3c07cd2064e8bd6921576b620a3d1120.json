{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { CALENDAR_TYPES } from './const';\nvar calendarTypes = Object.values(CALENDAR_TYPES);\nvar allViews = ['century', 'decade', 'year', 'month'];\nexport var isCalendarType = PropTypes.oneOf(calendarTypes);\nexport var isClassName = PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]);\nexport var isMinDate = function isMinDate(props, propName, componentName) {\n  var _a = props,\n    _b = propName,\n    minDate = _a[_b];\n  if (!minDate) {\n    return null;\n  }\n  if (!(minDate instanceof Date)) {\n    return new Error(\"Invalid prop `\".concat(propName, \"` of type `\").concat(typeof minDate, \"` supplied to `\").concat(componentName, \"`, expected instance of `Date`.\"));\n  }\n  var maxDate = props.maxDate;\n  if (maxDate && minDate > maxDate) {\n    return new Error(\"Invalid prop `\".concat(propName, \"` of type `\").concat(typeof minDate, \"` supplied to `\").concat(componentName, \"`, minDate cannot be larger than maxDate.\"));\n  }\n  return null;\n};\nexport var isMaxDate = function isMaxDate(props, propName, componentName) {\n  var _a = props,\n    _b = propName,\n    maxDate = _a[_b];\n  if (!maxDate) {\n    return null;\n  }\n  if (!(maxDate instanceof Date)) {\n    return new Error(\"Invalid prop `\".concat(propName, \"` of type `\").concat(typeof maxDate, \"` supplied to `\").concat(componentName, \"`, expected instance of `Date`.\"));\n  }\n  var minDate = props.minDate;\n  if (minDate && maxDate < minDate) {\n    return new Error(\"Invalid prop `\".concat(propName, \"` of type `\").concat(typeof maxDate, \"` supplied to `\").concat(componentName, \"`, maxDate cannot be smaller than minDate.\"));\n  }\n  return null;\n};\nexport var isRef = PropTypes.oneOfType([PropTypes.func, PropTypes.exact({\n  current: PropTypes.any\n})]);\nexport var isValue = PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.arrayOf(PropTypes.instanceOf(Date))]);\nexport var isViews = PropTypes.arrayOf(PropTypes.oneOf(allViews));\nexport var isView = function isView(props, propName, componentName) {\n  var _a = props,\n    _b = propName,\n    view = _a[_b];\n  if (view !== undefined && (typeof view !== 'string' || allViews.indexOf(view) === -1)) {\n    return new Error(\"Invalid prop `\".concat(propName, \"` of value `\").concat(view, \"` supplied to `\").concat(componentName, \"`, expected one of [\").concat(allViews.map(function (a) {\n      return \"\\\"\".concat(a, \"\\\"\");\n    }).join(', '), \"].\"));\n  }\n  // Everything is fine\n  return null;\n};\nisView.isRequired = function isViewIsRequired(props, propName, componentName, location, propFullName) {\n  var _a = props,\n    _b = propName,\n    view = _a[_b];\n  if (!view) {\n    return new Error(\"The prop `\".concat(propName, \"` is marked as required in `\").concat(componentName, \"`, but its value is `\").concat(view, \"`.\"));\n  }\n  return isView(props, propName, componentName, location, propFullName);\n};\nexport var rangeOf = function rangeOf(type) {\n  return PropTypes.arrayOf(type);\n};\nexport var tileGroupProps = {\n  activeStartDate: PropTypes.instanceOf(Date).isRequired,\n  hover: PropTypes.instanceOf(Date),\n  locale: PropTypes.string,\n  maxDate: isMaxDate,\n  minDate: isMinDate,\n  onClick: PropTypes.func,\n  onMouseOver: PropTypes.func,\n  tileClassName: PropTypes.oneOfType([PropTypes.func, isClassName]),\n  tileContent: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  value: isValue,\n  valueType: PropTypes.string\n};\nexport var tileProps = {\n  activeStartDate: PropTypes.instanceOf(Date).isRequired,\n  classes: PropTypes.arrayOf(PropTypes.string).isRequired,\n  date: PropTypes.instanceOf(Date).isRequired,\n  locale: PropTypes.string,\n  maxDate: isMaxDate,\n  minDate: isMinDate,\n  onClick: PropTypes.func,\n  onMouseOver: PropTypes.func,\n  style: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  tileClassName: PropTypes.oneOfType([PropTypes.func, isClassName]),\n  tileContent: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  tileDisabled: PropTypes.func\n};","map":null,"metadata":{},"sourceType":"module"}